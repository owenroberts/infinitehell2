class Camera{constructor(){this.centerPlayer=!1,this.view=[0,0,gme.width,gme.height],this.zoom=1.5,this.center=[100,0],this.lerp={center:[0,0],speed:8,threshold:.1}}lerpToPlayer(){this.lerp.center=[...this.center],this.lerp.start=!0}update(){if(this.lerp.start){let e=gme.halfWidth-player.x-player.halfWidth,t=gme.halfHeight-player.y-player.halfHeight,s=[e-this.lerp.center[0],t-this.lerp.center[1]];console.log(e,t),console.log(this.lerp.center),gme.ctx.scale(this.zoom,this.zoom),gme.ctx.translate(this.lerp.center[0],this.lerp.center[1]),(Math.abs(s[0])<this.lerp.threshold||Math.abs(s[1])<this.lerp.threshold)&&(this.lerp.start=!1,this.centerPlayer=!0),this.view[0]=-this.lerp.center[0],this.view[1]=-this.lerp.center[1]}else this.centerPlayer?(gme.ctx.translate(gme.halfWidth,gme.halfHeightx),gme.ctx.scale(this.zoom,this.zoom),gme.ctx.translate(-player.x-player.halfWidth,-player.y-player.halfHeight),this.view[0]=gme.halfWidth-player.x-player.halfWidth,this.view[1]=gme.halfHeight-player.y-player.halfHeight):(gme.ctx.scale(this.zoom,this.zoom),gme.ctx.translate(this.center[0],this.center[1]),this.view[0]=-this.center[0],this.view[1]=-this.center[1])}}class HellSprite extends Sprite{constructor(e,t,s,i){super(e,t,s,i)}display(e){this.isOnScreen(e)&&(this.debug&&this.drawDebug(),this.animation&&(this.animation.update(),this.animation.draw(this.x,this.y,GAME.suspend))),this.displayFunc&&this.displayFunc()}isOnScreen(e){return this.debug,this.x+this.width>e[0]&&this.y+this.height>e[1]&&this.x<e[0]+e[2]&&this.y<e[1]+e[3]}}class HellTextureSprite extends Sprite{constructor(e,t){super(e.x,e.y,e.animation,t),this.center=!1,this.stateName=`frame-${e.stateIndex}`,this.animation.createNewState(`frame-${e.stateIndex}`,e.stateIndex,e.stateIndex)}display(e){this.animation.state=this.stateName,super.display(e)}}class Physics{constructor(){this.display=!1,this.engine=Engine.create(),this.engine.gravity.y=2,this.defaultOptions={restitution:.5,friction:.9}}addBody(e,t,s){const i=Bodies.rectangle(Math.round(e),Math.round(t),s,s,{...this.defaultOptions,isStatic:!0}),n=new HellSprite(e,t,gme.anims.sprites.test_tile);return n.center=!0,gme.scenes.game.addSprite(n),Composite.add(this.engine.world,i),i}addTrigger(e,t,s,i,n){const a=Bodies.rectangle(Math.round(e),Math.round(t),s,i,{isStatic:!0,isSensor:!0});return a.isTrigger=!0,a.callback=n,Composite.add(this.engine.world,a),a}render(){if(this.display){let e=gme.ctx.lineWidth,t=gme.ctx.strokeStyle;gme.ctx.lineWidth=1,gme.ctx.strokeStyle="#00dd22";const s=Composite.allBodies(engine.world);for(let e=0,t=s.length;e<t;e++){const t=s[e];gme.ctx.beginPath();for(let e=0,s=t.parts.length;e<s;e++){const s=t.parts[e];gme.ctx.moveTo(s.vertices[0].x,s.vertices[0].y);for(let e=1,t=s.vertices.length;e<t;e++)gme.ctx.lineTo(s.vertices[e].x,s.vertices[e].y);gme.ctx.lineTo(s.vertices[0].x,s.vertices[0].y)}gme.ctx.stroke()}gme.ctx.lineWidth=e,gme.ctx.strokeStyle=t}}}class Player extends HellSprite{constructor(e,t,s,i){super(e,t),this.mapPosition=[Math.round(e),Math.round(t)],this.center=!0,this.debug=i||!1,this.speed=[1,1],this.jumpSpeed=-20,this.jumpJustPressed=!1,this.isJumping=!1,this.jumpCount=0,this.jumpMax=2,this.addAnimation(s),this.animation.state="idle_right",this.direction=1,this.input={right:!1,up:!1,left:!1,down:!1,jump:!1},this.hasSFX=!1,this.setupPhysics(),this.halfWidth=this.width/2,this.halfHeight=this.height/2,console.log("player sprite",this)}setupPhysics(){let e=[];this.blocked={down:null,up:null,right:null,left:null},this.sensors={};let[t,s]=this.position,[i,n]=[64,64];this.sensors.down=Bodies.rectangle(t,s+n/2,i/2,10,{isSensor:!0}),e.push(this.sensors.down),e.push(Bodies.rectangle(t,s,i,n));const a={inertia:1/0,restitution:.1,friction:.5,parts:e};this.body=Body.create(a),this.body.isPlayer=!0,Composite.add(physics.engine.world,this.body),console.log(this.body),Events.on(physics.engine,"afterUpdate",this.physicsUpdate.bind(this)),Events.on(physics.engine,"beforeUpdate",(e=>{this.blocked.down=!1}));let o=!0;Events.on(physics.engine,"collisionActive",(e=>{let t=e.pairs;o&&(o=!1);for(let e=0,s=t.length;e<s;e++){let s=t[e];s.bodyA!==this.sensors.down&&s.bodyB!==this.sensors.down||(this.blocked.down=!0),s.bodyA.isTrigger&&s.bodyB.parent.isPlayer&&(s.bodyA.calledBack||(s.bodyA.callback(),s.bodyA.calledBack=!0)),s.bodyB.isTrigger&&s.bodyA.parent.isPlayer&&(s.bodyB.calledBack||(s.bodyB.callback(),s.bodyB.calledBack=!0)),s.bodyA.calledBack&&Composite.remove(physics.engine.world,s.bodyA),s.bodyB.calledBack&&Composite.remove(physics.engine.world,s.bodyB)}}))}inputKey(e,t){this.input[e]=t}translatePosition(){return[-this.x-this.halfWidth,-this.y-this.halfHeight]}physicsUpdate(){this.blocked.down&&this.isJumping&&(this.isJumping=!1,this.jumpCount=0),this.input.jump?(this.jumpJustPressed||(this.blocked.down||this.jumpCount<this.jumpMax)&&(Body.setVelocity(this.body,{x:this.body.velocity.x,y:-10}),this.isJumping=!0,this.jumpCount++),this.jumpJustPressed=!0):this.jumpJustPressed=!1;let e=1==this.direction?"idle_right":"idle_left";!this.isJumping&&this.blocked.down||(e=1==this.direction?"jump_right":"jump_left"),this.input.right&&(Body.setVelocity(player.body,{x:3,y:player.body.velocity.y}),this.direction=1,this.isJumping||(e="right")),this.input.left&&(Body.setVelocity(player.body,{x:-3,y:player.body.velocity.y}),this.direction=-1,this.isJumping||(e="left")),this.position[0]=Math.round(this.body.position.x),this.position[1]=Math.round(this.body.position.y),this.animation.state=e,this.hasSFX&&this.playSFX(speed)}}class Scenery{constructor(){}setup(){let e=256;for(let t=0;t<gme.view.width;t+=e){let s=new HellTextureSprite({x:t+Cool.randomInt(-256,e),y:Cool.randomInt(0,100),animation:gme.anims.sprites.clouds,stateIndex:Cool.randomInt(0,gme.anims.sprites.clouds.endFrame)});gme.scenes.scenery.addToDisplay(s);let i=new HellTextureSprite({x:t+Cool.randomInt(-256,e),y:gme.view.height-64-Cool.randomInt(128),animation:gme.anims.sprites.fire,stateIndex:Cool.randomInt(0,gme.anims.sprites.fire.endFrame)});gme.scenes.scenery.addToDisplay(i);let n=new HellTextureSprite({x:t+Cool.randomInt(-256,e),y:gme.view.halfHeight-Cool.randomInt(-256,256),animation:gme.anims.sprites.land,stateIndex:Cool.randomInt(0,gme.anims.sprites.land.endFrame)});gme.scenes.scenery.addToDisplay(n)}}}const title=document.getElementById("title");function loadingAnimation(){let e="~"+title.textContent+"~";title.textContent=e}let loadingInterval=setInterval(loadingAnimation,1e3/12);const isMobile=Cool.mobilecheck();isMobile&&document.body.classList.add("mobile");const gme=new Game({dps:24,lineWidth:1,zoom:1,width:window.innerWidth,height:window.innerHeight,multiColor:!0,checkRetina:!0,suspend:!0,events:isMobile?["touch"]:["keyboard","mouse"],scenes:["game","splash","loading","scenery"],bounds:{left:-1024,top:1024,right:1024,bottom:1024}});gme.load({sprites:"data/sprites.json"},!1);const{Engine:Engine,Bodies:Bodies,Body:Body,Composite:Composite,Runner:Runner,Events:Events}=Matter;let player,levels=[],scenery=new Scenery,camera=new Camera,physics=new Physics;gme.start=function(){document.getElementById("splash").remove(),player=new Player(100,100,gme.anims.sprites.player),gme.scenes.game.addSprite(player);gme.view.halfWidth;const e=gme.view.halfHeight;for(let t=0;t<4;t++)physics.addBody(64*t,e-100,64);physics.addTrigger(-gme.halfWidth/2,e+300,2.5*gme.width,200,(()=>{camera.lerpToPlayer()})),scenery.setup(),gme.scenes.current="game",Runner.run(physics.engine)},gme.draw=function(){gme.ctx.save(),gme.ctx.clearRect(0,0,gme.view.width,gme.view.height),gme.scenes.scenery.display(),camera.update(),physics.render(),gme.scenes.current.display(camera.view),gme.ctx.restore()},gme.keyDown=function(e){switch(e){case"a":case"left":player.inputKey("left",!0);break;case"w":case"up":case"x":case"space":player.inputKey("jump",!0);break;case"d":case"right":player.inputKey("right",!0);break;case"g":case"h":break;case"t":showPhysics=!showPhysics,console.log("show physies",showPhysics)}},gme.keyUp=function(e){switch(e){case"a":case"left":player.inputKey("left",!1);break;case"w":case"up":case"x":case"space":player.inputKey("jump",!1);break;case"d":case"right":player.inputKey("right",!1);break;case"s":case"down":player.inputKey("down",!1)}};
//# sourceMappingURL=src_maps/gme.min.js.map
